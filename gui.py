import os
import os
import six
import sys
import pickle
import shutil
import pickle
import zipfile
import sklearn
import numpy as np
import numpy as np
import pandas as pd
import tkinter as tk
import os, sys, stat 
import seaborn as sns
from tkinter import *
from PIL import Image
from PIL import ImageTk,Image
from tkinter import filedialog
from xgboost import XGBClassifier
sys.modules['sklearn.externals.six'] = six
from androguard.core.bytecodes.apk import APK
from androguard.core.bytecodes.apk import APK
from sklearn.ensemble import ExtraTreesClassifier
from mlxtend.classifier import StackingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score


def Browse_Model():
	textbox1.delete('1.0',"end-1c")
	filename = filedialog.askopenfilename(initialdir =  "/", title = "Select A File", filetype =((("APK file",".apk"),("APK file",".apk")) ))
	textbox.delete('1.0', "end-1c")
	textbox.insert("end-1c", filename)
	filename1 = './models/cnn_model.h5'
	model = load_model(filename1)
	perms  = pickle.loads(open(os.path.join('./models/perms_pkl'),'rb').read())
	#predict1(filename,perms,clf)
	print('Done')
	vector = {}
	a = APK(filename)
	perm = a.get_permissions()
	#print(perm)
	for d in perms:
		if d in perm:
			vector[d]=1
		else:
			vector[d]=0
	input = [ v for v in vector.values() ]
	#print(input)
	
	ppred = model.predict([input])
	ppred = np.argmax(ppred,axis=1)
	prediction = ppred[0]
	print(prediction)
	
	if prediction == 1:
  		textbox1.insert("end-1c",str('malign'))
	else:
  		textbox1.insert("end-1c",str('benign'))
	
	if(prediction == 1):
			load = Image.open('malign.jpg')
			load = load.resize((600, 400), Image.ANTIALIAS)
			render = ImageTk.PhotoImage(load)
			img = Label(image=render)
			img.image = render
			img.place(x=50, y=235)
	else:
			load = Image.open('benign.jpg')
			load = load.resize((600, 400), Image.ANTIALIAS)
			render = ImageTk.PhotoImage(load)
			img = Label(image=render)
			img.image = render
			img.place(x=50, y=235)


app = tk.Tk()

HEIGHT = 700
WIDTH = 700
app.title("Android Malware Detection")
app.resizable(0,0)
canvas = Canvas(width=700, height=700)
canvas.pack()
filename=('background.jpg')
load = Image.open(filename)
load = load.resize((700, 700), Image.ANTIALIAS)
render = ImageTk.PhotoImage(load)
img = Label(image=render)
img.image = render
load = Image.open(filename)
img.place(x=1, y=1)


frame = tk.Frame(app,  bg='black', bd=5)
frame.place(relx=0.5, rely=0.1, relwidth=0.9, relheight=0.25, anchor='n')
#frame_window = C.create_window(100, 40, window=frame)

textbox = tk.Text(frame, font=20,width="30",height=2)
textbox.grid(row=2, column=1)

submit1 = tk.Button(frame,font=40, text='Upload File & Predict',height=2,width="25",command=lambda: Browse_Model())
submit1.grid(row=3, column=2,padx=20,pady=20)

textbox1 = tk.Text(frame, font=10,width="30",height=2)
textbox1.grid(row=3, column=1)

lower_frame = tk.Frame(app, bg='black', bd=10)
lower_frame.place(relx=0.5, rely=0.32, relwidth=0.9, relheight=0.6, anchor='n')


bg_color = 'white'
results = tk.Text(lower_frame)
results.config(font=40, bg=bg_color)
results.place(relwidth=1, relheight=1)

app.mainloop()





